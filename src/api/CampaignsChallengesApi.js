/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ChallengeActivityResource', 'model/ChallengeEventResource', 'model/ChallengeResource', 'model/PageResourceBareChallengeActivityResource', 'model/PageResourceChallengeEventResource', 'model/PageResourceChallengeResource', 'model/PageResourceTemplateResource', 'model/Result', 'model/TemplateResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ChallengeActivityResource'), require('../model/ChallengeEventResource'), require('../model/ChallengeResource'), require('../model/PageResourceBareChallengeActivityResource'), require('../model/PageResourceChallengeEventResource'), require('../model/PageResourceChallengeResource'), require('../model/PageResourceTemplateResource'), require('../model/Result'), require('../model/TemplateResource'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikPlatformApiDocumentationLatest) {
      root.KnetikPlatformApiDocumentationLatest = {};
    }
    root.KnetikPlatformApiDocumentationLatest.CampaignsChallengesApi = factory(root.KnetikPlatformApiDocumentationLatest.ApiClient, root.KnetikPlatformApiDocumentationLatest.ChallengeActivityResource, root.KnetikPlatformApiDocumentationLatest.ChallengeEventResource, root.KnetikPlatformApiDocumentationLatest.ChallengeResource, root.KnetikPlatformApiDocumentationLatest.PageResourceBareChallengeActivityResource, root.KnetikPlatformApiDocumentationLatest.PageResourceChallengeEventResource, root.KnetikPlatformApiDocumentationLatest.PageResourceChallengeResource, root.KnetikPlatformApiDocumentationLatest.PageResourceTemplateResource, root.KnetikPlatformApiDocumentationLatest.Result, root.KnetikPlatformApiDocumentationLatest.TemplateResource);
  }
}(this, function(ApiClient, ChallengeActivityResource, ChallengeEventResource, ChallengeResource, PageResourceBareChallengeActivityResource, PageResourceChallengeEventResource, PageResourceChallengeResource, PageResourceTemplateResource, Result, TemplateResource) {
  'use strict';

  /**
   * CampaignsChallenges service.
   * @module api/CampaignsChallengesApi
   * @version latest

   */

  /**
   * Constructs a new CampaignsChallengesApi. 
   * @alias module:api/CampaignsChallengesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createChallenge operation.
     * @callback module:api/CampaignsChallengesApi~createChallengeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChallengeResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a challenge
     * Challenges do not run on their own.  They must be added to a campaign before events will spawn.
     * @param {Object} opts Optional parameters
     * @param {module:model/ChallengeResource} opts.challengeResource The challenge resource object
     * @param {module:api/CampaignsChallengesApi~createChallengeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChallengeResource}
     */
    this.createChallenge = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['challengeResource'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChallengeResource;

      return this.apiClient.callApi(
        '/challenges', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createChallengeActivity operation.
     * @callback module:api/CampaignsChallengesApi~createChallengeActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChallengeActivityResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a challenge activity
     * @param {Number} challengeId The challenge id
     * @param {Object} opts Optional parameters
     * @param {module:model/ChallengeActivityResource} opts.challengeActivityResource The challenge activity resource object
     * @param {Boolean} opts.validateSettings Whether to validate the settings being sent against the available settings on the base activity. (default to false)
     * @param {module:api/CampaignsChallengesApi~createChallengeActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChallengeActivityResource}
     */
    this.createChallengeActivity = function(challengeId, opts, callback) {
      opts = opts || {};
      var postBody = opts['challengeActivityResource'];

      // verify the required parameter 'challengeId' is set
      if (challengeId === undefined || challengeId === null) {
        throw new Error("Missing the required parameter 'challengeId' when calling createChallengeActivity");
      }


      var pathParams = {
        'challenge_id': challengeId
      };
      var queryParams = {
        'validateSettings': opts['validateSettings']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChallengeActivityResource;

      return this.apiClient.callApi(
        '/challenges/{challenge_id}/activities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createChallengeActivityTemplate operation.
     * @callback module:api/CampaignsChallengesApi~createChallengeActivityTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a challenge activity template
     * Challenge Activity Templates define a type of challenge activity and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.challengeActivityTemplateResource The challengeActivity template resource object
     * @param {module:api/CampaignsChallengesApi~createChallengeActivityTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResource}
     */
    this.createChallengeActivityTemplate = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['challengeActivityTemplateResource'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/challenge-activities/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createChallengeTemplate operation.
     * @callback module:api/CampaignsChallengesApi~createChallengeTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a challenge template
     * Challenge Templates define a type of challenge and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.challengeTemplateResource The challenge template resource object
     * @param {module:api/CampaignsChallengesApi~createChallengeTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResource}
     */
    this.createChallengeTemplate = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['challengeTemplateResource'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/challenges/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChallenge operation.
     * @callback module:api/CampaignsChallengesApi~deleteChallengeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a challenge
     * @param {Number} id The challenge id
     * @param {module:api/CampaignsChallengesApi~deleteChallengeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteChallenge = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChallenge");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/challenges/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChallengeActivity operation.
     * @callback module:api/CampaignsChallengesApi~deleteChallengeActivityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a challenge activity
     * A challenge can have multiple instances of the same activity and thus the id used is of the specific entry within the challenge
     * @param {Number} id The challenge_activity id
     * @param {Number} challengeId The challenge id
     * @param {module:api/CampaignsChallengesApi~deleteChallengeActivityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteChallengeActivity = function(id, challengeId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChallengeActivity");
      }

      // verify the required parameter 'challengeId' is set
      if (challengeId === undefined || challengeId === null) {
        throw new Error("Missing the required parameter 'challengeId' when calling deleteChallengeActivity");
      }


      var pathParams = {
        'id': id,
        'challenge_id': challengeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/challenges/{challenge_id}/activities/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChallengeActivityTemplate operation.
     * @callback module:api/CampaignsChallengesApi~deleteChallengeActivityTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a challenge activity template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @param {module:api/CampaignsChallengesApi~deleteChallengeActivityTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteChallengeActivityTemplate = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChallengeActivityTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'cascade': opts['cascade']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/challenge-activities/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChallengeEvent operation.
     * @callback module:api/CampaignsChallengesApi~deleteChallengeEventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a challenge event
     * @param {Number} id The challenge event id
     * @param {module:api/CampaignsChallengesApi~deleteChallengeEventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteChallengeEvent = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChallengeEvent");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/challenges/events/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChallengeTemplate operation.
     * @callback module:api/CampaignsChallengesApi~deleteChallengeTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a challenge template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @param {module:api/CampaignsChallengesApi~deleteChallengeTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteChallengeTemplate = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChallengeTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'cascade': opts['cascade']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/challenges/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChallenge operation.
     * @callback module:api/CampaignsChallengesApi~getChallengeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChallengeResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a challenge
     * @param {Number} id The challenge id
     * @param {module:api/CampaignsChallengesApi~getChallengeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChallengeResource}
     */
    this.getChallenge = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChallenge");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChallengeResource;

      return this.apiClient.callApi(
        '/challenges/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChallengeActivities operation.
     * @callback module:api/CampaignsChallengesApi~getChallengeActivitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceBareChallengeActivityResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List and search challenge activities
     * @param {Number} challengeId The challenge id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {module:api/CampaignsChallengesApi~getChallengeActivitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceBareChallengeActivityResource}
     */
    this.getChallengeActivities = function(challengeId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'challengeId' is set
      if (challengeId === undefined || challengeId === null) {
        throw new Error("Missing the required parameter 'challengeId' when calling getChallengeActivities");
      }


      var pathParams = {
        'challenge_id': challengeId
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceBareChallengeActivityResource;

      return this.apiClient.callApi(
        '/challenges/{challenge_id}/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChallengeActivity operation.
     * @callback module:api/CampaignsChallengesApi~getChallengeActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChallengeActivityResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single challenge activity
     * A challenge can have multiple instances of the same activity and thus the id used is of the specific entry within the challenge
     * @param {Number} id The challenge_activity id
     * @param {Number} challengeId The challenge id
     * @param {module:api/CampaignsChallengesApi~getChallengeActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChallengeActivityResource}
     */
    this.getChallengeActivity = function(id, challengeId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChallengeActivity");
      }

      // verify the required parameter 'challengeId' is set
      if (challengeId === undefined || challengeId === null) {
        throw new Error("Missing the required parameter 'challengeId' when calling getChallengeActivity");
      }


      var pathParams = {
        'id': id,
        'challenge_id': challengeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChallengeActivityResource;

      return this.apiClient.callApi(
        '/challenges/{challenge_id}/activities/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChallengeActivityTemplate operation.
     * @callback module:api/CampaignsChallengesApi~getChallengeActivityTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single challenge activity template
     * @param {String} id The id of the template
     * @param {module:api/CampaignsChallengesApi~getChallengeActivityTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResource}
     */
    this.getChallengeActivityTemplate = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChallengeActivityTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/challenge-activities/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChallengeActivityTemplates operation.
     * @callback module:api/CampaignsChallengesApi~getChallengeActivityTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceTemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List and search challenge activity templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {module:api/CampaignsChallengesApi~getChallengeActivityTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceTemplateResource}
     */
    this.getChallengeActivityTemplates = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceTemplateResource;

      return this.apiClient.callApi(
        '/challenge-activities/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChallengeEvent operation.
     * @callback module:api/CampaignsChallengesApi~getChallengeEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChallengeEventResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single challenge event details
     * @param {Number} id The challenge event id
     * @param {module:api/CampaignsChallengesApi~getChallengeEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChallengeEventResource}
     */
    this.getChallengeEvent = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChallengeEvent");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChallengeEventResource;

      return this.apiClient.callApi(
        '/challenges/events/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChallengeEvents operation.
     * @callback module:api/CampaignsChallengesApi~getChallengeEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceChallengeEventResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of challenge events
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the event start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {String} opts.filterEndDate A comma separated string without spaces.  First value is the operator to search on, second value is the event end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {Boolean} opts.filterCampaigns check only for events from currently running campaigns
     * @param {Number} opts.filterChallenge check only for events from the challenge specified by id
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {module:api/CampaignsChallengesApi~getChallengeEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceChallengeEventResource}
     */
    this.getChallengeEvents = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter_start_date': opts['filterStartDate'],
        'filter_end_date': opts['filterEndDate'],
        'filter_campaigns': opts['filterCampaigns'],
        'filter_challenge': opts['filterChallenge'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceChallengeEventResource;

      return this.apiClient.callApi(
        '/challenges/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChallengeTemplate operation.
     * @callback module:api/CampaignsChallengesApi~getChallengeTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single challenge template
     * @param {String} id The id of the template
     * @param {module:api/CampaignsChallengesApi~getChallengeTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResource}
     */
    this.getChallengeTemplate = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getChallengeTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/challenges/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChallengeTemplates operation.
     * @callback module:api/CampaignsChallengesApi~getChallengeTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceTemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List and search challenge templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {module:api/CampaignsChallengesApi~getChallengeTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceTemplateResource}
     */
    this.getChallengeTemplates = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceTemplateResource;

      return this.apiClient.callApi(
        '/challenges/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getChallenges operation.
     * @callback module:api/CampaignsChallengesApi~getChallengesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceChallengeResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of challenges
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterTemplate Filter for challenges that are not tied to campaigns (templates)
     * @param {Boolean} opts.filterActiveCampaign Filter for challenges that are tied to active campaigns
     * @param {String} opts.filterStartDate A comma separated string without spaces.  First value is the operator to search on, second value is the challenge start date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {String} opts.filterEndDate A comma separated string without spaces.  First value is the operator to search on, second value is the challenge end date, a unix timestamp in seconds.  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {module:api/CampaignsChallengesApi~getChallengesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceChallengeResource}
     */
    this.getChallenges = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter_template': opts['filterTemplate'],
        'filter_active_campaign': opts['filterActiveCampaign'],
        'filter_start_date': opts['filterStartDate'],
        'filter_end_date': opts['filterEndDate'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceChallengeResource;

      return this.apiClient.callApi(
        '/challenges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChallenge operation.
     * @callback module:api/CampaignsChallengesApi~updateChallengeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChallengeResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a challenge
     * If the challenge is a copy, changes will propagate to all the related challenges
     * @param {Number} id The challenge id
     * @param {Object} opts Optional parameters
     * @param {module:model/ChallengeResource} opts.challengeResource The challenge resource object
     * @param {module:api/CampaignsChallengesApi~updateChallengeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChallengeResource}
     */
    this.updateChallenge = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['challengeResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateChallenge");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChallengeResource;

      return this.apiClient.callApi(
        '/challenges/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChallengeActivity operation.
     * @callback module:api/CampaignsChallengesApi~updateChallengeActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChallengeActivityResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a challenge activity
     * A challenge can have multiple instances of the same activity and thus the id used is of the specific entry within the challenge
     * @param {Number} id The challenge_activity id
     * @param {Number} challengeId The challenge id
     * @param {Object} opts Optional parameters
     * @param {module:model/ChallengeActivityResource} opts.challengeActivityResource The challenge activity resource object
     * @param {module:api/CampaignsChallengesApi~updateChallengeActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChallengeActivityResource}
     */
    this.updateChallengeActivity = function(id, challengeId, opts, callback) {
      opts = opts || {};
      var postBody = opts['challengeActivityResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateChallengeActivity");
      }

      // verify the required parameter 'challengeId' is set
      if (challengeId === undefined || challengeId === null) {
        throw new Error("Missing the required parameter 'challengeId' when calling updateChallengeActivity");
      }


      var pathParams = {
        'id': id,
        'challenge_id': challengeId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChallengeActivityResource;

      return this.apiClient.callApi(
        '/challenges/{challenge_id}/activities/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChallengeActivityTemplate operation.
     * @callback module:api/CampaignsChallengesApi~updateChallengeActivityTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an challenge activity template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.challengeActivityTemplateResource The challengeActivity template resource object
     * @param {module:api/CampaignsChallengesApi~updateChallengeActivityTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResource}
     */
    this.updateChallengeActivityTemplate = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['challengeActivityTemplateResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateChallengeActivityTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/challenge-activities/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChallengeTemplate operation.
     * @callback module:api/CampaignsChallengesApi~updateChallengeTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a challenge template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.challengeTemplateResource The challenge template resource object
     * @param {module:api/CampaignsChallengesApi~updateChallengeTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResource}
     */
    this.updateChallengeTemplate = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['challengeTemplateResource'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateChallengeTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/challenges/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
