/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AchievementDefinitionResource', 'model/BreTriggerResource', 'model/PageResourceAchievementDefinitionResource', 'model/PageResourceTemplateResource', 'model/PageResourceUserAchievementGroupResource', 'model/Result', 'model/TemplateResource', 'model/UserAchievementGroupResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AchievementDefinitionResource'), require('../model/BreTriggerResource'), require('../model/PageResourceAchievementDefinitionResource'), require('../model/PageResourceTemplateResource'), require('../model/PageResourceUserAchievementGroupResource'), require('../model/Result'), require('../model/TemplateResource'), require('../model/UserAchievementGroupResource'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikPlatformApiDocumentationLatest) {
      root.KnetikPlatformApiDocumentationLatest = {};
    }
    root.KnetikPlatformApiDocumentationLatest.GamificationAchievementsApi = factory(root.KnetikPlatformApiDocumentationLatest.ApiClient, root.KnetikPlatformApiDocumentationLatest.AchievementDefinitionResource, root.KnetikPlatformApiDocumentationLatest.BreTriggerResource, root.KnetikPlatformApiDocumentationLatest.PageResourceAchievementDefinitionResource, root.KnetikPlatformApiDocumentationLatest.PageResourceTemplateResource, root.KnetikPlatformApiDocumentationLatest.PageResourceUserAchievementGroupResource, root.KnetikPlatformApiDocumentationLatest.Result, root.KnetikPlatformApiDocumentationLatest.TemplateResource, root.KnetikPlatformApiDocumentationLatest.UserAchievementGroupResource);
  }
}(this, function(ApiClient, AchievementDefinitionResource, BreTriggerResource, PageResourceAchievementDefinitionResource, PageResourceTemplateResource, PageResourceUserAchievementGroupResource, Result, TemplateResource, UserAchievementGroupResource) {
  'use strict';

  /**
   * GamificationAchievements service.
   * @module api/GamificationAchievementsApi
   * @version latest

   */

  /**
   * Constructs a new GamificationAchievementsApi. 
   * @alias module:api/GamificationAchievementsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAchievement operation.
     * @callback module:api/GamificationAchievementsApi~createAchievementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchievementDefinitionResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new achievement definition
     * If the definition contains a trigger event name, a BRE rule is created, so that tracking logic is executed when the triggering event occurs. If no trigger event name is specified, the user&#39;s achievement status must manually be updated via the API.
     * @param {Object} opts Optional parameters
     * @param {module:model/AchievementDefinitionResource} opts.achievement The achievement definition
     * @param {module:api/GamificationAchievementsApi~createAchievementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchievementDefinitionResource}
     */
    this.createAchievement = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['achievement'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AchievementDefinitionResource;

      return this.apiClient.callApi(
        '/achievements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAchievementTemplate operation.
     * @callback module:api/GamificationAchievementsApi~createAchievementTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an achievement template
     * Achievement templates define a type of achievement and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.template The achievement template to be created
     * @param {module:api/GamificationAchievementsApi~createAchievementTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResource}
     */
    this.createAchievementTemplate = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['template'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/achievements/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAchievement operation.
     * @callback module:api/GamificationAchievementsApi~deleteAchievementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an achievement definition
     * Will also disable the associated generated rule, if any.
     * @param {String} name The name of the achievement
     * @param {module:api/GamificationAchievementsApi~deleteAchievementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAchievement = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteAchievement");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/achievements/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAchievementTemplate operation.
     * @callback module:api/GamificationAchievementsApi~deleteAchievementTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an achievement template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @param {module:api/GamificationAchievementsApi~deleteAchievementTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAchievementTemplate = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAchievementTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'cascade': opts['cascade']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/achievements/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAchievement operation.
     * @callback module:api/GamificationAchievementsApi~getAchievementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchievementDefinitionResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single achievement definition
     * @param {String} name The name of the achievement
     * @param {module:api/GamificationAchievementsApi~getAchievementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchievementDefinitionResource}
     */
    this.getAchievement = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getAchievement");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AchievementDefinitionResource;

      return this.apiClient.callApi(
        '/achievements/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAchievementTemplate operation.
     * @callback module:api/GamificationAchievementsApi~getAchievementTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single achievement template
     * @param {String} id The id of the template
     * @param {module:api/GamificationAchievementsApi~getAchievementTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResource}
     */
    this.getAchievementTemplate = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAchievementTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/achievements/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAchievementTemplates operation.
     * @callback module:api/GamificationAchievementsApi~getAchievementTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceTemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List and search achievement templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {module:api/GamificationAchievementsApi~getAchievementTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceTemplateResource}
     */
    this.getAchievementTemplates = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceTemplateResource;

      return this.apiClient.callApi(
        '/achievements/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAchievementTriggers operation.
     * @callback module:api/GamificationAchievementsApi~getAchievementTriggersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BreTriggerResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of triggers that can be used to trigger an achievement progress update
     * @param {module:api/GamificationAchievementsApi~getAchievementTriggersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BreTriggerResource>}
     */
    this.getAchievementTriggers = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [BreTriggerResource];

      return this.apiClient.callApi(
        '/achievements/triggers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAchievements operation.
     * @callback module:api/GamificationAchievementsApi~getAchievementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceAchievementDefinitionResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all achievement definitions in the system
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterTagset Filter for achievements with specified tags (separated by comma)
     * @param {String} opts.filterName Filter for achievements whose name contains a string
     * @param {Boolean} opts.filterHidden Filter for achievements that are hidden or not
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to name:ASC)
     * @param {Boolean} opts.filterDerived Filter for achievements that are derived from other services (default to false)
     * @param {module:api/GamificationAchievementsApi~getAchievementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceAchievementDefinitionResource}
     */
    this.getAchievements = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter_tagset': opts['filterTagset'],
        'filter_name': opts['filterName'],
        'filter_hidden': opts['filterHidden'],
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order'],
        'filter_derived': opts['filterDerived']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceAchievementDefinitionResource;

      return this.apiClient.callApi(
        '/achievements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDerivedAchievements operation.
     * @callback module:api/GamificationAchievementsApi~getDerivedAchievementsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AchievementDefinitionResource>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of derived achievements
     * Used by other services that depend on achievements
     * @param {String} name The name of the derived achievement
     * @param {module:api/GamificationAchievementsApi~getDerivedAchievementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AchievementDefinitionResource>}
     */
    this.getDerivedAchievements = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getDerivedAchievements");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AchievementDefinitionResource];

      return this.apiClient.callApi(
        '/achievements/derived/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserAchievementProgress operation.
     * @callback module:api/GamificationAchievementsApi~getUserAchievementProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAchievementGroupResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve progress on a given achievement for a given user
     * Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
     * @param {Number} userId The user&#39;s id
     * @param {String} achievementName The achievement&#39;s name
     * @param {module:api/GamificationAchievementsApi~getUserAchievementProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAchievementGroupResource}
     */
    this.getUserAchievementProgress = function(userId, achievementName, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserAchievementProgress");
      }

      // verify the required parameter 'achievementName' is set
      if (achievementName === undefined || achievementName === null) {
        throw new Error("Missing the required parameter 'achievementName' when calling getUserAchievementProgress");
      }


      var pathParams = {
        'user_id': userId,
        'achievement_name': achievementName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserAchievementGroupResource;

      return this.apiClient.callApi(
        '/users/{user_id}/achievements/{achievement_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserAchievementsProgress operation.
     * @callback module:api/GamificationAchievementsApi~getUserAchievementsProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceUserAchievementGroupResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve progress on achievements for a given user
     * Assets will not be filled in on the resources returned. Use &#39;Get a single poll&#39; to retrieve the full resource with assets for a given item as needed.
     * @param {Number} userId The user&#39;s id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterAchievementDerived Filter for achievements that are derived from other services
     * @param {String} opts.filterAchievementTagset Filter for achievements with specified tags (separated by comma)
     * @param {String} opts.filterAchievementName Filter for achievements whose name contains a string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {module:api/GamificationAchievementsApi~getUserAchievementsProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceUserAchievementGroupResource}
     */
    this.getUserAchievementsProgress = function(userId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserAchievementsProgress");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
        'filter_achievement_derived': opts['filterAchievementDerived'],
        'filter_achievement_tagset': opts['filterAchievementTagset'],
        'filter_achievement_name': opts['filterAchievementName'],
        'size': opts['size'],
        'page': opts['page']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceUserAchievementGroupResource;

      return this.apiClient.callApi(
        '/users/{user_id}/achievements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersAchievementProgress operation.
     * @callback module:api/GamificationAchievementsApi~getUsersAchievementProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceUserAchievementGroupResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve progress on a given achievement for all users
     * Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
     * @param {String} achievementName The achievement&#39;s name
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterAchievementDerived Filter for achievements that are derived from other services
     * @param {String} opts.filterAchievementTagset Filter for achievements with specified tags (separated by comma)
     * @param {String} opts.filterAchievementName Filter for achievements whose name contains a string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {module:api/GamificationAchievementsApi~getUsersAchievementProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceUserAchievementGroupResource}
     */
    this.getUsersAchievementProgress = function(achievementName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'achievementName' is set
      if (achievementName === undefined || achievementName === null) {
        throw new Error("Missing the required parameter 'achievementName' when calling getUsersAchievementProgress");
      }


      var pathParams = {
        'achievement_name': achievementName
      };
      var queryParams = {
        'filter_achievement_derived': opts['filterAchievementDerived'],
        'filter_achievement_tagset': opts['filterAchievementTagset'],
        'filter_achievement_name': opts['filterAchievementName'],
        'size': opts['size'],
        'page': opts['page']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceUserAchievementGroupResource;

      return this.apiClient.callApi(
        '/users/achievements/{achievement_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersAchievementsProgress operation.
     * @callback module:api/GamificationAchievementsApi~getUsersAchievementsProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceUserAchievementGroupResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve progress on achievements for all users
     * Assets will not be filled in on the resources returned. Use &#39;Get single achievement progress for user&#39; to retrieve the full resource with assets for a given user as needed.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.filterAchievementDerived Filter for achievements that are derived from other services
     * @param {String} opts.filterAchievementTagset Filter for achievements with specified tags (separated by comma)
     * @param {String} opts.filterAchievementName Filter for achievements whose name contains a string
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {module:api/GamificationAchievementsApi~getUsersAchievementsProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceUserAchievementGroupResource}
     */
    this.getUsersAchievementsProgress = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'filter_achievement_derived': opts['filterAchievementDerived'],
        'filter_achievement_tagset': opts['filterAchievementTagset'],
        'filter_achievement_name': opts['filterAchievementName'],
        'size': opts['size'],
        'page': opts['page']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceUserAchievementGroupResource;

      return this.apiClient.callApi(
        '/users/achievements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the incrementAchievementProgress operation.
     * @callback module:api/GamificationAchievementsApi~incrementAchievementProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAchievementGroupResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Increment an achievement progress record for a user
     * If no progress record yet exists for the user, it will be created. Otherwise it will be updated and the provided value added to the existing progress. May be negative. If progress meets or exceeds the achievement&#39;s max_value it will be marked as earned and a BRE event will be triggered for the &lt;code&gt;BreAchievementEarnedTrigger&lt;/code&gt;.
     * @param {Number} userId The user&#39;s id
     * @param {String} achievementName The achievement&#39;s name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.progress The amount to add to the progress value
     * @param {module:api/GamificationAchievementsApi~incrementAchievementProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAchievementGroupResource}
     */
    this.incrementAchievementProgress = function(userId, achievementName, opts, callback) {
      opts = opts || {};
      var postBody = opts['progress'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling incrementAchievementProgress");
      }

      // verify the required parameter 'achievementName' is set
      if (achievementName === undefined || achievementName === null) {
        throw new Error("Missing the required parameter 'achievementName' when calling incrementAchievementProgress");
      }


      var pathParams = {
        'user_id': userId,
        'achievement_name': achievementName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserAchievementGroupResource;

      return this.apiClient.callApi(
        '/users/{user_id}/achievements/{achievement_name}/progress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setAchievementProgress operation.
     * @callback module:api/GamificationAchievementsApi~setAchievementProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAchievementGroupResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set an achievement progress record for a user
     * If no progress record yet exists for the user, it will be created. Otherwise it will be updated and progress set to the provided value. If progress meets or exceeds the achievement&#39;s max_value it will be marked as earned and a BRE event will be triggered for the &lt;code&gt;BreAchievementEarnedTrigger&lt;/code&gt;.
     * @param {Number} userId The user&#39;s id
     * @param {String} achievementName The achievement&#39;s name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.progress The new progress value
     * @param {module:api/GamificationAchievementsApi~setAchievementProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAchievementGroupResource}
     */
    this.setAchievementProgress = function(userId, achievementName, opts, callback) {
      opts = opts || {};
      var postBody = opts['progress'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setAchievementProgress");
      }

      // verify the required parameter 'achievementName' is set
      if (achievementName === undefined || achievementName === null) {
        throw new Error("Missing the required parameter 'achievementName' when calling setAchievementProgress");
      }


      var pathParams = {
        'user_id': userId,
        'achievement_name': achievementName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserAchievementGroupResource;

      return this.apiClient.callApi(
        '/users/{user_id}/achievements/{achievement_name}/progress', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAchievement operation.
     * @callback module:api/GamificationAchievementsApi~updateAchievementCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AchievementDefinitionResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an achievement definition
     * The existing generated rule, if any, will be deleted. A new rule will be created if a trigger event name is specified in the new version.
     * @param {String} name The name of the achievement
     * @param {Object} opts Optional parameters
     * @param {module:model/AchievementDefinitionResource} opts.achievement The achievement definition
     * @param {module:api/GamificationAchievementsApi~updateAchievementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AchievementDefinitionResource}
     */
    this.updateAchievement = function(name, opts, callback) {
      opts = opts || {};
      var postBody = opts['achievement'];

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateAchievement");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AchievementDefinitionResource;

      return this.apiClient.callApi(
        '/achievements/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAchievementTemplate operation.
     * @callback module:api/GamificationAchievementsApi~updateAchievementTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an achievement template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/TemplateResource} opts.template The updated template
     * @param {module:api/GamificationAchievementsApi~updateAchievementTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResource}
     */
    this.updateAchievementTemplate = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['template'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAchievementTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateResource;

      return this.apiClient.callApi(
        '/achievements/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
