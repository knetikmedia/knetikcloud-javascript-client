/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LeaderboardEntryResource', 'model/LeaderboardResource', 'model/Result'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/LeaderboardEntryResource'), require('../model/LeaderboardResource'), require('../model/Result'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikPlatformApiDocumentationLatest) {
      root.KnetikPlatformApiDocumentationLatest = {};
    }
    root.KnetikPlatformApiDocumentationLatest.GamificationLeaderboardsApi = factory(root.KnetikPlatformApiDocumentationLatest.ApiClient, root.KnetikPlatformApiDocumentationLatest.LeaderboardEntryResource, root.KnetikPlatformApiDocumentationLatest.LeaderboardResource, root.KnetikPlatformApiDocumentationLatest.Result);
  }
}(this, function(ApiClient, LeaderboardEntryResource, LeaderboardResource, Result) {
  'use strict';

  /**
   * GamificationLeaderboards service.
   * @module api/GamificationLeaderboardsApi
   * @version latest

   */

  /**
   * Constructs a new GamificationLeaderboardsApi. 
   * @alias module:api/GamificationLeaderboardsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getLeaderboard operation.
     * @callback module:api/GamificationLeaderboardsApi~getLeaderboardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeaderboardResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves leaderboard details and paginated entries
     * The context type identifies the type of entity (i.e., &#39;activity&#39;) being tracked on the leaderboard. The context ID is the unique ID of the actual entity tracked by the leaderboard. Sorting is based on the fields of LeaderboardEntryResource rather than the returned LeaderboardResource.
     * @param {String} contextType The context type for the leaderboard
     * @param {String} contextId The context id for the leaderboard
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to score:DESC,updated:ASC,user_id:ASC)
     * @param {module:api/GamificationLeaderboardsApi~getLeaderboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeaderboardResource}
     */
    this.getLeaderboard = function(contextType, contextId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'contextType' is set
      if (contextType === undefined || contextType === null) {
        throw new Error("Missing the required parameter 'contextType' when calling getLeaderboard");
      }

      // verify the required parameter 'contextId' is set
      if (contextId === undefined || contextId === null) {
        throw new Error("Missing the required parameter 'contextId' when calling getLeaderboard");
      }


      var pathParams = {
        'context_type': contextType,
        'context_id': contextId
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LeaderboardResource;

      return this.apiClient.callApi(
        '/leaderboards/{context_type}/{context_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLeaderboardRank operation.
     * @callback module:api/GamificationLeaderboardsApi~getLeaderboardRankCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LeaderboardEntryResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific user entry with rank
     * The context type identifies the type of entity (i.e., &#39;activity&#39;) being tracked on the leaderboard. The context ID is the unique ID of the actual entity tracked by the leaderboard
     * @param {String} contextType The context type for the leaderboard
     * @param {String} contextId The context id for the leaderboard
     * @param {String} id The id of a user
     * @param {module:api/GamificationLeaderboardsApi~getLeaderboardRankCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LeaderboardEntryResource}
     */
    this.getLeaderboardRank = function(contextType, contextId, id, callback) {
      var postBody = null;

      // verify the required parameter 'contextType' is set
      if (contextType === undefined || contextType === null) {
        throw new Error("Missing the required parameter 'contextType' when calling getLeaderboardRank");
      }

      // verify the required parameter 'contextId' is set
      if (contextId === undefined || contextId === null) {
        throw new Error("Missing the required parameter 'contextId' when calling getLeaderboardRank");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getLeaderboardRank");
      }


      var pathParams = {
        'context_type': contextType,
        'context_id': contextId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LeaderboardEntryResource;

      return this.apiClient.callApi(
        '/leaderboards/{context_type}/{context_id}/users/{id}/rank', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLeaderboardStrategies operation.
     * @callback module:api/GamificationLeaderboardsApi~getLeaderboardStrategiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of available leaderboard strategy names
     * @param {module:api/GamificationLeaderboardsApi~getLeaderboardStrategiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getLeaderboardStrategies = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/leaderboards/strategies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
