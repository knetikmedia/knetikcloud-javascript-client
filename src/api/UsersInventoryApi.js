/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EntitlementGrantRequest', 'model/EntitlementItem', 'model/InvoiceResource', 'model/ItemTemplateResource', 'model/PageResourceEntitlementItem', 'model/PageResourceItemTemplateResource', 'model/PageResourceUserInventoryResource', 'model/PageResourceUserItemLogResource', 'model/Result', 'model/UserInventoryAddRequest', 'model/UserInventoryResource'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/EntitlementGrantRequest'), require('../model/EntitlementItem'), require('../model/InvoiceResource'), require('../model/ItemTemplateResource'), require('../model/PageResourceEntitlementItem'), require('../model/PageResourceItemTemplateResource'), require('../model/PageResourceUserInventoryResource'), require('../model/PageResourceUserItemLogResource'), require('../model/Result'), require('../model/UserInventoryAddRequest'), require('../model/UserInventoryResource'));
  } else {
    // Browser globals (root is window)
    if (!root.KnetikPlatformApiDocumentationLatest) {
      root.KnetikPlatformApiDocumentationLatest = {};
    }
    root.KnetikPlatformApiDocumentationLatest.UsersInventoryApi = factory(root.KnetikPlatformApiDocumentationLatest.ApiClient, root.KnetikPlatformApiDocumentationLatest.EntitlementGrantRequest, root.KnetikPlatformApiDocumentationLatest.EntitlementItem, root.KnetikPlatformApiDocumentationLatest.InvoiceResource, root.KnetikPlatformApiDocumentationLatest.ItemTemplateResource, root.KnetikPlatformApiDocumentationLatest.PageResourceEntitlementItem, root.KnetikPlatformApiDocumentationLatest.PageResourceItemTemplateResource, root.KnetikPlatformApiDocumentationLatest.PageResourceUserInventoryResource, root.KnetikPlatformApiDocumentationLatest.PageResourceUserItemLogResource, root.KnetikPlatformApiDocumentationLatest.Result, root.KnetikPlatformApiDocumentationLatest.UserInventoryAddRequest, root.KnetikPlatformApiDocumentationLatest.UserInventoryResource);
  }
}(this, function(ApiClient, EntitlementGrantRequest, EntitlementItem, InvoiceResource, ItemTemplateResource, PageResourceEntitlementItem, PageResourceItemTemplateResource, PageResourceUserInventoryResource, PageResourceUserItemLogResource, Result, UserInventoryAddRequest, UserInventoryResource) {
  'use strict';

  /**
   * UsersInventory service.
   * @module api/UsersInventoryApi
   * @version latest

   */

  /**
   * Constructs a new UsersInventoryApi. 
   * @alias module:api/UsersInventoryApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addItemToUserInventory operation.
     * @callback module:api/UsersInventoryApi~addItemToUserInventoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds an item to the user inventory
     * The inventory is fulfilled asynchronously UNLESS the invoice is explicitely skipped. Depending on the use case, it might require the client to verify that the entitlement was added after the fact or configure a BRE rule to get a notification in real time
     * @param {Number} id The id of the user
     * @param {Object} opts Optional parameters
     * @param {module:model/UserInventoryAddRequest} opts.userInventoryAddRequest The user inventory add request object
     * @param {module:api/UsersInventoryApi~addItemToUserInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceResource}
     */
    this.addItemToUserInventory = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['userInventoryAddRequest'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addItemToUserInventory");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InvoiceResource;

      return this.apiClient.callApi(
        '/users/{id}/inventory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkUserEntitlementItem operation.
     * @callback module:api/UsersInventoryApi~checkUserEntitlementItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check for access to an item without consuming
     * Useful for pre-check and accounts for all various buisness rules
     * @param {String} userId The id of the user to check for or &#39;me&#39; for logged in user
     * @param {Number} itemId The id of the item
     * @param {Object} opts Optional parameters
     * @param {String} opts.sku The specific sku of an entitlement list addition to check entitlement for. This is of very limited and specific use and should generally be left out
     * @param {module:api/UsersInventoryApi~checkUserEntitlementItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.checkUserEntitlementItem = function(userId, itemId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling checkUserEntitlementItem");
      }

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling checkUserEntitlementItem");
      }


      var pathParams = {
        'user_id': userId,
        'item_id': itemId
      };
      var queryParams = {
        'sku': opts['sku']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/entitlements/{item_id}/check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createEntitlementItem operation.
     * @callback module:api/UsersInventoryApi~createEntitlementItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntitlementItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an entitlement item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (default to false)
     * @param {module:model/EntitlementItem} opts.entitlementItem The entitlement item object
     * @param {module:api/UsersInventoryApi~createEntitlementItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntitlementItem}
     */
    this.createEntitlementItem = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['entitlementItem'];


      var pathParams = {
      };
      var queryParams = {
        'cascade': opts['cascade']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EntitlementItem;

      return this.apiClient.callApi(
        '/entitlements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createEntitlementTemplate operation.
     * @callback module:api/UsersInventoryApi~createEntitlementTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemTemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an entitlement template
     * Entitlement templates define a type of entitlement and the properties they have
     * @param {Object} opts Optional parameters
     * @param {module:model/ItemTemplateResource} opts.template The entitlement template to be created
     * @param {module:api/UsersInventoryApi~createEntitlementTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemTemplateResource}
     */
    this.createEntitlementTemplate = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['template'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ItemTemplateResource;

      return this.apiClient.callApi(
        '/entitlements/templates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntitlementItem operation.
     * @callback module:api/UsersInventoryApi~deleteEntitlementItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an entitlement item
     * @param {Number} entitlementId The id of the entitlement
     * @param {module:api/UsersInventoryApi~deleteEntitlementItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteEntitlementItem = function(entitlementId, callback) {
      var postBody = null;

      // verify the required parameter 'entitlementId' is set
      if (entitlementId === undefined || entitlementId === null) {
        throw new Error("Missing the required parameter 'entitlementId' when calling deleteEntitlementItem");
      }


      var pathParams = {
        'entitlement_id': entitlementId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/entitlements/{entitlement_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntitlementTemplate operation.
     * @callback module:api/UsersInventoryApi~deleteEntitlementTemplateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an entitlement template
     * If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.cascade The value needed to delete used templates
     * @param {module:api/UsersInventoryApi~deleteEntitlementTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteEntitlementTemplate = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteEntitlementTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'cascade': opts['cascade']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/entitlements/templates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitlementItem operation.
     * @callback module:api/UsersInventoryApi~getEntitlementItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntitlementItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single entitlement item
     * @param {Number} entitlementId The id of the entitlement
     * @param {module:api/UsersInventoryApi~getEntitlementItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntitlementItem}
     */
    this.getEntitlementItem = function(entitlementId, callback) {
      var postBody = null;

      // verify the required parameter 'entitlementId' is set
      if (entitlementId === undefined || entitlementId === null) {
        throw new Error("Missing the required parameter 'entitlementId' when calling getEntitlementItem");
      }


      var pathParams = {
        'entitlement_id': entitlementId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EntitlementItem;

      return this.apiClient.callApi(
        '/entitlements/{entitlement_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitlementItems operation.
     * @callback module:api/UsersInventoryApi~getEntitlementItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceEntitlementItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List and search entitlement items
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {module:api/UsersInventoryApi~getEntitlementItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceEntitlementItem}
     */
    this.getEntitlementItems = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceEntitlementItem;

      return this.apiClient.callApi(
        '/entitlements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitlementTemplate operation.
     * @callback module:api/UsersInventoryApi~getEntitlementTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemTemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single entitlement template
     * @param {String} id The id of the template
     * @param {module:api/UsersInventoryApi~getEntitlementTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemTemplateResource}
     */
    this.getEntitlementTemplate = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEntitlementTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ItemTemplateResource;

      return this.apiClient.callApi(
        '/entitlements/templates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitlementTemplates operation.
     * @callback module:api/UsersInventoryApi~getEntitlementTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceItemTemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List and search entitlement templates
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.order A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (default to id:ASC)
     * @param {module:api/UsersInventoryApi~getEntitlementTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceItemTemplateResource}
     */
    this.getEntitlementTemplates = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page'],
        'order': opts['order']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceItemTemplateResource;

      return this.apiClient.callApi(
        '/entitlements/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserInventories operation.
     * @callback module:api/UsersInventoryApi~getUserInventoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceUserInventoryResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the user inventory entries for a given user
     * @param {Number} id The id of the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.inactive If true, accepts inactive user inventories (default to false)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.filterItemName Filter by items whose name starts with a string
     * @param {Number} opts.filterItemId Filter by item id
     * @param {String} opts.filterUsername Filter by entries owned by the user with the specified username
     * @param {String} opts.filterGroup Filter by entries owned by the users in a given group, by unique name
     * @param {String} opts.filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {module:api/UsersInventoryApi~getUserInventoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceUserInventoryResource}
     */
    this.getUserInventories = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserInventories");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'inactive': opts['inactive'],
        'size': opts['size'],
        'page': opts['page'],
        'filter_item_name': opts['filterItemName'],
        'filter_item_id': opts['filterItemId'],
        'filter_username': opts['filterUsername'],
        'filter_group': opts['filterGroup'],
        'filter_date': opts['filterDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceUserInventoryResource;

      return this.apiClient.callApi(
        '/users/{id}/inventory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserInventory operation.
     * @callback module:api/UsersInventoryApi~getUserInventoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInventoryResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an inventory entry
     * @param {Number} userId The id of the inventory owner or &#39;me&#39; for the logged in user
     * @param {Number} id The id of the user inventory
     * @param {module:api/UsersInventoryApi~getUserInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserInventoryResource}
     */
    this.getUserInventory = function(userId, id, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserInventory");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserInventory");
      }


      var pathParams = {
        'user_id': userId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserInventoryResource;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserInventoryLog operation.
     * @callback module:api/UsersInventoryApi~getUserInventoryLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceUserItemLogResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the log entries for this inventory entry
     * @param {String} userId The id of the inventory owner or &#39;me&#39; for the logged in user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {module:api/UsersInventoryApi~getUserInventoryLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceUserItemLogResource}
     */
    this.getUserInventoryLog = function(userId, id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserInventoryLog");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserInventoryLog");
      }


      var pathParams = {
        'user_id': userId,
        'id': id
      };
      var queryParams = {
        'size': opts['size'],
        'page': opts['page']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceUserItemLogResource;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersInventory operation.
     * @callback module:api/UsersInventoryApi~getUsersInventoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResourceUserInventoryResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the user inventory entries for all users
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.inactive If true, accepts inactive user inventories (default to false)
     * @param {Number} opts.size The number of objects returned per page (default to 25)
     * @param {Number} opts.page The number of the page returned, starting with 1 (default to 1)
     * @param {String} opts.filterItemName Filter by items whose name starts with a string
     * @param {Number} opts.filterItemId Filter by item id
     * @param {String} opts.filterUsername Filter by entries owned by the user with the specified username
     * @param {String} opts.filterGroup Filter by entries owned by the users in a given group, by unique name
     * @param {String} opts.filterDate A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE).
     * @param {module:api/UsersInventoryApi~getUsersInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResourceUserInventoryResource}
     */
    this.getUsersInventory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'inactive': opts['inactive'],
        'size': opts['size'],
        'page': opts['page'],
        'filter_item_name': opts['filterItemName'],
        'filter_item_id': opts['filterItemId'],
        'filter_username': opts['filterUsername'],
        'filter_group': opts['filterGroup'],
        'filter_date': opts['filterDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PageResourceUserInventoryResource;

      return this.apiClient.callApi(
        '/inventories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the grantUserEntitlement operation.
     * @callback module:api/UsersInventoryApi~grantUserEntitlementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Grant an entitlement
     * @param {Number} userId The id of the user to grant the entitlement to
     * @param {module:model/EntitlementGrantRequest} grantRequest grantRequest
     * @param {module:api/UsersInventoryApi~grantUserEntitlementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.grantUserEntitlement = function(userId, grantRequest, callback) {
      var postBody = grantRequest;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling grantUserEntitlement");
      }

      // verify the required parameter 'grantRequest' is set
      if (grantRequest === undefined || grantRequest === null) {
        throw new Error("Missing the required parameter 'grantRequest' when calling grantUserEntitlement");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/entitlements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEntitlementItem operation.
     * @callback module:api/UsersInventoryApi~updateEntitlementItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an entitlement item
     * @param {Number} entitlementId The id of the entitlement
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.cascade Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (default to false)
     * @param {module:model/EntitlementItem} opts.entitlementItem The entitlement item object
     * @param {module:api/UsersInventoryApi~updateEntitlementItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateEntitlementItem = function(entitlementId, opts, callback) {
      opts = opts || {};
      var postBody = opts['entitlementItem'];

      // verify the required parameter 'entitlementId' is set
      if (entitlementId === undefined || entitlementId === null) {
        throw new Error("Missing the required parameter 'entitlementId' when calling updateEntitlementItem");
      }


      var pathParams = {
        'entitlement_id': entitlementId
      };
      var queryParams = {
        'cascade': opts['cascade']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/entitlements/{entitlement_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEntitlementTemplate operation.
     * @callback module:api/UsersInventoryApi~updateEntitlementTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ItemTemplateResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an entitlement template
     * @param {String} id The id of the template
     * @param {Object} opts Optional parameters
     * @param {module:model/ItemTemplateResource} opts.template The updated template
     * @param {module:api/UsersInventoryApi~updateEntitlementTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ItemTemplateResource}
     */
    this.updateEntitlementTemplate = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['template'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateEntitlementTemplate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ItemTemplateResource;

      return this.apiClient.callApi(
        '/entitlements/templates/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserInventoryBehaviorData operation.
     * @callback module:api/UsersInventoryApi~updateUserInventoryBehaviorDataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the behavior data for an inventory entry
     * @param {Number} userId The id of the user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Object} opts.data The data map
     * @param {module:api/UsersInventoryApi~updateUserInventoryBehaviorDataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateUserInventoryBehaviorData = function(userId, id, opts, callback) {
      opts = opts || {};
      var postBody = opts['data'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserInventoryBehaviorData");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserInventoryBehaviorData");
      }


      var pathParams = {
        'user_id': userId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}/behavior-data', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserInventoryExpires operation.
     * @callback module:api/UsersInventoryApi~updateUserInventoryExpiresCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the expiration date
     * Will change the current grace period for a subscription but not the bill date (possibly even ending before having the chance to re-bill)
     * @param {Number} userId user_id
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {Number} opts.timestamp The new expiration date as a unix timestamp in seconds. May be null (no body).
     * @param {module:api/UsersInventoryApi~updateUserInventoryExpiresCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateUserInventoryExpires = function(userId, id, opts, callback) {
      opts = opts || {};
      var postBody = opts['timestamp'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserInventoryExpires");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserInventoryExpires");
      }


      var pathParams = {
        'user_id': userId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}/expires', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserInventoryStatus operation.
     * @callback module:api/UsersInventoryApi~updateUserInventoryStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the status for an inventory entry
     * @param {Number} userId The id of the user
     * @param {Number} id The id of the user inventory
     * @param {Object} opts Optional parameters
     * @param {String} opts.inventoryStatus The inventory status object
     * @param {module:api/UsersInventoryApi~updateUserInventoryStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateUserInventoryStatus = function(userId, id, opts, callback) {
      opts = opts || {};
      var postBody = opts['inventoryStatus'];

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserInventoryStatus");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateUserInventoryStatus");
      }


      var pathParams = {
        'user_id': userId,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/inventory/{id}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the useUserEntitlementItem operation.
     * @callback module:api/UsersInventoryApi~useUserEntitlementItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use an item
     * @param {String} userId The id of the user to check for or &#39;me&#39; for logged in user
     * @param {Number} itemId The id of the item
     * @param {Object} opts Optional parameters
     * @param {String} opts.sku The specific sku of an entitlement_list addition to check entitlement for. This is of very limited and specific use and should generally be left out
     * @param {String} opts.info Any additional info to add to the log about this use
     * @param {module:api/UsersInventoryApi~useUserEntitlementItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.useUserEntitlementItem = function(userId, itemId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling useUserEntitlementItem");
      }

      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling useUserEntitlementItem");
      }


      var pathParams = {
        'user_id': userId,
        'item_id': itemId
      };
      var queryParams = {
        'sku': opts['sku'],
        'info': opts['info']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/entitlements/{item_id}/use', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
